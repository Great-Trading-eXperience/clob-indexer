// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class OrderMatched extends ethereum.Event {
  get params(): OrderMatched__Params {
    return new OrderMatched__Params(this);
  }
}

export class OrderMatched__Params {
  _event: OrderMatched;

  constructor(event: OrderMatched) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyOrderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sellOrderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get side(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get executionPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get executedQuantity(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OrderPlaced extends ethereum.Event {
  get params(): OrderPlaced__Params {
    return new OrderPlaced__Params(this);
  }
}

export class OrderPlaced__Params {
  _event: OrderPlaced;

  constructor(event: OrderPlaced) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get side(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isMarketOrder(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get status(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateOrder extends ethereum.Event {
  get params(): UpdateOrder__Params {
    return new UpdateOrder__Params(this);
  }
}

export class UpdateOrder__Params {
  _event: UpdateOrder;

  constructor(event: UpdateOrder) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get filled(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class OrderBook__getBestPriceResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get volume(): BigInt {
    return this[1].toBigInt();
  }
}

export class OrderBook__getNextBestPricesResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get volume(): BigInt {
    return this[1].toBigInt();
  }
}

export class OrderBook__getOrderResultValue0Struct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }

  get next(): BigInt {
    return this[2].toBigInt();
  }

  get quantity(): BigInt {
    return this[3].toBigInt();
  }

  get filled(): BigInt {
    return this[4].toBigInt();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get prev(): BigInt {
    return this[6].toBigInt();
  }

  get expiry(): BigInt {
    return this[7].toBigInt();
  }

  get status(): i32 {
    return this[8].toI32();
  }

  get orderType(): i32 {
    return this[9].toI32();
  }

  get side(): i32 {
    return this[10].toI32();
  }
}

export class OrderBook__getOrderQueueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderCount(): BigInt {
    return this.value0;
  }

  getTotalVolume(): BigInt {
    return this.value1;
  }
}

export class OrderBook__getTradingRulesResultValue0Struct extends ethereum.Tuple {
  get minTradeAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minAmountMovement(): BigInt {
    return this[1].toBigInt();
  }

  get minPriceMovement(): BigInt {
    return this[2].toBigInt();
  }

  get minOrderSize(): BigInt {
    return this[3].toBigInt();
  }
}

export class OrderBook extends ethereum.SmartContract {
  static bind(address: Address): OrderBook {
    return new OrderBook("OrderBook", address);
  }

  getBestPrice(side: i32): OrderBook__getBestPriceResultValue0Struct {
    let result = super.call(
      "getBestPrice",
      "getBestPrice(uint8):((uint128,uint256))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side))],
    );

    return changetype<OrderBook__getBestPriceResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getBestPrice(
    side: i32,
  ): ethereum.CallResult<OrderBook__getBestPriceResultValue0Struct> {
    let result = super.tryCall(
      "getBestPrice",
      "getBestPrice(uint8):((uint128,uint256))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OrderBook__getBestPriceResultValue0Struct>(value[0].toTuple()),
    );
  }

  getNextBestPrices(
    side: i32,
    price: BigInt,
    count: i32,
  ): Array<OrderBook__getNextBestPricesResultValue0Struct> {
    let result = super.call(
      "getNextBestPrices",
      "getNextBestPrices(uint8,uint128,uint8):((uint128,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(count)),
      ],
    );

    return result[0].toTupleArray<OrderBook__getNextBestPricesResultValue0Struct>();
  }

  try_getNextBestPrices(
    side: i32,
    price: BigInt,
    count: i32,
  ): ethereum.CallResult<
    Array<OrderBook__getNextBestPricesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getNextBestPrices",
      "getNextBestPrices(uint8,uint128,uint8):((uint128,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(count)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OrderBook__getNextBestPricesResultValue0Struct>(),
    );
  }

  getOrder(orderId: BigInt): OrderBook__getOrderResultValue0Struct {
    let result = super.call(
      "getOrder",
      "getOrder(uint48):((address,uint48,uint48,uint128,uint128,uint128,uint48,uint48,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(orderId)],
    );

    return changetype<OrderBook__getOrderResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getOrder(
    orderId: BigInt,
  ): ethereum.CallResult<OrderBook__getOrderResultValue0Struct> {
    let result = super.tryCall(
      "getOrder",
      "getOrder(uint48):((address,uint48,uint48,uint128,uint128,uint128,uint48,uint48,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(orderId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OrderBook__getOrderResultValue0Struct>(value[0].toTuple()),
    );
  }

  getOrderQueue(side: i32, price: BigInt): OrderBook__getOrderQueueResult {
    let result = super.call(
      "getOrderQueue",
      "getOrderQueue(uint8,uint128):(uint48,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(price),
      ],
    );

    return new OrderBook__getOrderQueueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getOrderQueue(
    side: i32,
    price: BigInt,
  ): ethereum.CallResult<OrderBook__getOrderQueueResult> {
    let result = super.tryCall(
      "getOrderQueue",
      "getOrderQueue(uint8,uint128):(uint48,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(price),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OrderBook__getOrderQueueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getTradingRules(): OrderBook__getTradingRulesResultValue0Struct {
    let result = super.call(
      "getTradingRules",
      "getTradingRules():((uint128,uint128,uint128,uint128))",
      [],
    );

    return changetype<OrderBook__getTradingRulesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTradingRules(): ethereum.CallResult<OrderBook__getTradingRulesResultValue0Struct> {
    let result = super.tryCall(
      "getTradingRules",
      "getTradingRules():((uint128,uint128,uint128,uint128))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OrderBook__getTradingRulesResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  placeMarketOrder(quantity: BigInt, side: i32, user: Address): BigInt {
    let result = super.call(
      "placeMarketOrder",
      "placeMarketOrder(uint128,uint8,address):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(quantity),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_placeMarketOrder(
    quantity: BigInt,
    side: i32,
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeMarketOrder",
      "placeMarketOrder(uint128,uint8,address):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(quantity),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  placeOrder(
    price: BigInt,
    quantity: BigInt,
    side: i32,
    user: Address,
    timeInForce: i32,
  ): BigInt {
    let result = super.call(
      "placeOrder",
      "placeOrder(uint128,uint128,uint8,address,uint8):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(quantity),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(timeInForce)),
      ],
    );

    return result[0].toBigInt();
  }

  try_placeOrder(
    price: BigInt,
    quantity: BigInt,
    side: i32,
    user: Address,
    timeInForce: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeOrder",
      "placeOrder(uint128,uint128,uint8,address,uint8):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(quantity),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(timeInForce)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _poolManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _balanceManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tradingRules(): InitializeCall_tradingRulesStruct {
    return changetype<InitializeCall_tradingRulesStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get _poolKey(): InitializeCall_poolKeyStruct {
    return changetype<InitializeCall_poolKeyStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_tradingRulesStruct extends ethereum.Tuple {
  get minTradeAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minAmountMovement(): BigInt {
    return this[1].toBigInt();
  }

  get minPriceMovement(): BigInt {
    return this[2].toBigInt();
  }

  get minOrderSize(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitializeCall_poolKeyStruct extends ethereum.Tuple {
  get baseCurrency(): Address {
    return this[0].toAddress();
  }

  get quoteCurrency(): Address {
    return this[1].toAddress();
  }
}

export class PlaceMarketOrderCall extends ethereum.Call {
  get inputs(): PlaceMarketOrderCall__Inputs {
    return new PlaceMarketOrderCall__Inputs(this);
  }

  get outputs(): PlaceMarketOrderCall__Outputs {
    return new PlaceMarketOrderCall__Outputs(this);
  }
}

export class PlaceMarketOrderCall__Inputs {
  _call: PlaceMarketOrderCall;

  constructor(call: PlaceMarketOrderCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get side(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class PlaceMarketOrderCall__Outputs {
  _call: PlaceMarketOrderCall;

  constructor(call: PlaceMarketOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PlaceOrderCall extends ethereum.Call {
  get inputs(): PlaceOrderCall__Inputs {
    return new PlaceOrderCall__Inputs(this);
  }

  get outputs(): PlaceOrderCall__Outputs {
    return new PlaceOrderCall__Outputs(this);
  }
}

export class PlaceOrderCall__Inputs {
  _call: PlaceOrderCall;

  constructor(call: PlaceOrderCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get side(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get user(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get timeInForce(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class PlaceOrderCall__Outputs {
  _call: PlaceOrderCall;

  constructor(call: PlaceOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class SetTradingRulesCall extends ethereum.Call {
  get inputs(): SetTradingRulesCall__Inputs {
    return new SetTradingRulesCall__Inputs(this);
  }

  get outputs(): SetTradingRulesCall__Outputs {
    return new SetTradingRulesCall__Outputs(this);
  }
}

export class SetTradingRulesCall__Inputs {
  _call: SetTradingRulesCall;

  constructor(call: SetTradingRulesCall) {
    this._call = call;
  }

  get _tradingRules(): SetTradingRulesCall_tradingRulesStruct {
    return changetype<SetTradingRulesCall_tradingRulesStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class SetTradingRulesCall__Outputs {
  _call: SetTradingRulesCall;

  constructor(call: SetTradingRulesCall) {
    this._call = call;
  }
}

export class SetTradingRulesCall_tradingRulesStruct extends ethereum.Tuple {
  get minTradeAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minAmountMovement(): BigInt {
    return this[1].toBigInt();
  }

  get minPriceMovement(): BigInt {
    return this[2].toBigInt();
  }

  get minOrderSize(): BigInt {
    return this[3].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
