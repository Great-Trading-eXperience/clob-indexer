// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CurrencyAdded extends ethereum.Event {
  get params(): CurrencyAdded__Params {
    return new CurrencyAdded__Params(this);
  }
}

export class CurrencyAdded__Params {
  _event: CurrencyAdded;

  constructor(event: CurrencyAdded) {
    this._event = event;
  }

  get currency(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IntermediaryAdded extends ethereum.Event {
  get params(): IntermediaryAdded__Params {
    return new IntermediaryAdded__Params(this);
  }
}

export class IntermediaryAdded__Params {
  _event: IntermediaryAdded;

  constructor(event: IntermediaryAdded) {
    this._event = event;
  }

  get currency(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IntermediaryRemoved extends ethereum.Event {
  get params(): IntermediaryRemoved__Params {
    return new IntermediaryRemoved__Params(this);
  }
}

export class IntermediaryRemoved__Params {
  _event: IntermediaryRemoved;

  constructor(event: IntermediaryRemoved) {
    this._event = event;
  }

  get currency(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get orderBook(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseCurrency(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get quoteCurrency(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class PoolLiquidityUpdated extends ethereum.Event {
  get params(): PoolLiquidityUpdated__Params {
    return new PoolLiquidityUpdated__Params(this);
  }
}

export class PoolLiquidityUpdated__Params {
  _event: PoolLiquidityUpdated;

  constructor(event: PoolLiquidityUpdated) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newLiquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PoolManager__createPoolInput_tradingRulesStruct extends ethereum.Tuple {
  get minTradeAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minAmountMovement(): BigInt {
    return this[1].toBigInt();
  }

  get minPriceMovement(): BigInt {
    return this[2].toBigInt();
  }

  get minOrderSize(): BigInt {
    return this[3].toBigInt();
  }

  get slippageTreshold(): i32 {
    return this[4].toI32();
  }
}

export class PoolManager__createPoolKeyResultValue0Struct extends ethereum.Tuple {
  get baseCurrency(): Address {
    return this[0].toAddress();
  }

  get quoteCurrency(): Address {
    return this[1].toAddress();
  }
}

export class PoolManager__getPoolResultValue0Struct extends ethereum.Tuple {
  get baseCurrency(): Address {
    return this[0].toAddress();
  }

  get quoteCurrency(): Address {
    return this[1].toAddress();
  }

  get orderBook(): Address {
    return this[2].toAddress();
  }
}

export class PoolManager__getPoolInputKeyStruct extends ethereum.Tuple {
  get baseCurrency(): Address {
    return this[0].toAddress();
  }

  get quoteCurrency(): Address {
    return this[1].toAddress();
  }
}

export class PoolManager__getPoolIdInputKeyStruct extends ethereum.Tuple {
  get baseCurrency(): Address {
    return this[0].toAddress();
  }

  get quoteCurrency(): Address {
    return this[1].toAddress();
  }
}

export class PoolManager__poolsResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getBaseCurrency(): Address {
    return this.value0;
  }

  getQuoteCurrency(): Address {
    return this.value1;
  }

  getOrderBook(): Address {
    return this.value2;
  }
}

export class PoolManager extends ethereum.SmartContract {
  static bind(address: Address): PoolManager {
    return new PoolManager("PoolManager", address);
  }

  allCurrencies(param0: BigInt): Address {
    let result = super.call(
      "allCurrencies",
      "allCurrencies(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_allCurrencies(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allCurrencies",
      "allCurrencies(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  commonIntermediaries(param0: BigInt): Address {
    let result = super.call(
      "commonIntermediaries",
      "commonIntermediaries(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_commonIntermediaries(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "commonIntermediaries",
      "commonIntermediaries(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createPool(
    _baseCurrency: Address,
    _quoteCurrency: Address,
    _tradingRules: PoolManager__createPoolInput_tradingRulesStruct,
  ): Bytes {
    let result = super.call(
      "createPool",
      "createPool(address,address,(uint128,uint128,uint128,uint128,uint8)):(bytes32)",
      [
        ethereum.Value.fromAddress(_baseCurrency),
        ethereum.Value.fromAddress(_quoteCurrency),
        ethereum.Value.fromTuple(_tradingRules),
      ],
    );

    return result[0].toBytes();
  }

  try_createPool(
    _baseCurrency: Address,
    _quoteCurrency: Address,
    _tradingRules: PoolManager__createPoolInput_tradingRulesStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address,(uint128,uint128,uint128,uint128,uint8)):(bytes32)",
      [
        ethereum.Value.fromAddress(_baseCurrency),
        ethereum.Value.fromAddress(_quoteCurrency),
        ethereum.Value.fromTuple(_tradingRules),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createPoolKey(
    currency1: Address,
    currency2: Address,
  ): PoolManager__createPoolKeyResultValue0Struct {
    let result = super.call(
      "createPoolKey",
      "createPoolKey(address,address):((address,address))",
      [
        ethereum.Value.fromAddress(currency1),
        ethereum.Value.fromAddress(currency2),
      ],
    );

    return changetype<PoolManager__createPoolKeyResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_createPoolKey(
    currency1: Address,
    currency2: Address,
  ): ethereum.CallResult<PoolManager__createPoolKeyResultValue0Struct> {
    let result = super.tryCall(
      "createPoolKey",
      "createPoolKey(address,address):((address,address))",
      [
        ethereum.Value.fromAddress(currency1),
        ethereum.Value.fromAddress(currency2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolManager__createPoolKeyResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getAllCurrencies(): Array<Address> {
    let result = super.call(
      "getAllCurrencies",
      "getAllCurrencies():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getAllCurrencies(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllCurrencies",
      "getAllCurrencies():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCommonIntermediaries(): Array<Address> {
    let result = super.call(
      "getCommonIntermediaries",
      "getCommonIntermediaries():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getCommonIntermediaries(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCommonIntermediaries",
      "getCommonIntermediaries():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPool(
    key: PoolManager__getPoolInputKeyStruct,
  ): PoolManager__getPoolResultValue0Struct {
    let result = super.call(
      "getPool",
      "getPool((address,address)):((address,address,address))",
      [ethereum.Value.fromTuple(key)],
    );

    return changetype<PoolManager__getPoolResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPool(
    key: PoolManager__getPoolInputKeyStruct,
  ): ethereum.CallResult<PoolManager__getPoolResultValue0Struct> {
    let result = super.tryCall(
      "getPool",
      "getPool((address,address)):((address,address,address))",
      [ethereum.Value.fromTuple(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolManager__getPoolResultValue0Struct>(value[0].toTuple()),
    );
  }

  getPoolId(key: PoolManager__getPoolIdInputKeyStruct): Bytes {
    let result = super.call(
      "getPoolId",
      "getPoolId((address,address)):(bytes32)",
      [ethereum.Value.fromTuple(key)],
    );

    return result[0].toBytes();
  }

  try_getPoolId(
    key: PoolManager__getPoolIdInputKeyStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPoolId",
      "getPoolId((address,address)):(bytes32)",
      [ethereum.Value.fromTuple(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPoolLiquidityScore(currency1: Address, currency2: Address): BigInt {
    let result = super.call(
      "getPoolLiquidityScore",
      "getPoolLiquidityScore(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(currency1),
        ethereum.Value.fromAddress(currency2),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPoolLiquidityScore(
    currency1: Address,
    currency2: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolLiquidityScore",
      "getPoolLiquidityScore(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(currency1),
        ethereum.Value.fromAddress(currency2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCommonIntermediary(param0: Address): boolean {
    let result = super.call(
      "isCommonIntermediary",
      "isCommonIntermediary(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isCommonIntermediary(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCommonIntermediary",
      "isCommonIntermediary(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolExists(currency1: Address, currency2: Address): boolean {
    let result = super.call(
      "poolExists",
      "poolExists(address,address):(bool)",
      [
        ethereum.Value.fromAddress(currency1),
        ethereum.Value.fromAddress(currency2),
      ],
    );

    return result[0].toBoolean();
  }

  try_poolExists(
    currency1: Address,
    currency2: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "poolExists",
      "poolExists(address,address):(bool)",
      [
        ethereum.Value.fromAddress(currency1),
        ethereum.Value.fromAddress(currency2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolLiquidity(param0: Bytes): BigInt {
    let result = super.call(
      "poolLiquidity",
      "poolLiquidity(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_poolLiquidity(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolLiquidity",
      "poolLiquidity(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: Bytes): PoolManager__poolsResult {
    let result = super.call(
      "pools",
      "pools(bytes32):(address,address,address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new PoolManager__poolsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
    );
  }

  try_pools(param0: Bytes): ethereum.CallResult<PoolManager__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(bytes32):(address,address,address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolManager__poolsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
      ),
    );
  }

  registeredCurrencies(param0: Address): boolean {
    let result = super.call(
      "registeredCurrencies",
      "registeredCurrencies(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_registeredCurrencies(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registeredCurrencies",
      "registeredCurrencies(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _balanceManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCommonIntermediaryCall extends ethereum.Call {
  get inputs(): AddCommonIntermediaryCall__Inputs {
    return new AddCommonIntermediaryCall__Inputs(this);
  }

  get outputs(): AddCommonIntermediaryCall__Outputs {
    return new AddCommonIntermediaryCall__Outputs(this);
  }
}

export class AddCommonIntermediaryCall__Inputs {
  _call: AddCommonIntermediaryCall;

  constructor(call: AddCommonIntermediaryCall) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCommonIntermediaryCall__Outputs {
  _call: AddCommonIntermediaryCall;

  constructor(call: AddCommonIntermediaryCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _baseCurrency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _quoteCurrency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tradingRules(): CreatePoolCall_tradingRulesStruct {
    return changetype<CreatePoolCall_tradingRulesStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreatePoolCall_tradingRulesStruct extends ethereum.Tuple {
  get minTradeAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minAmountMovement(): BigInt {
    return this[1].toBigInt();
  }

  get minPriceMovement(): BigInt {
    return this[2].toBigInt();
  }

  get minOrderSize(): BigInt {
    return this[3].toBigInt();
  }

  get slippageTreshold(): i32 {
    return this[4].toI32();
  }
}

export class RemoveCommonIntermediaryCall extends ethereum.Call {
  get inputs(): RemoveCommonIntermediaryCall__Inputs {
    return new RemoveCommonIntermediaryCall__Inputs(this);
  }

  get outputs(): RemoveCommonIntermediaryCall__Outputs {
    return new RemoveCommonIntermediaryCall__Outputs(this);
  }
}

export class RemoveCommonIntermediaryCall__Inputs {
  _call: RemoveCommonIntermediaryCall;

  constructor(call: RemoveCommonIntermediaryCall) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCommonIntermediaryCall__Outputs {
  _call: RemoveCommonIntermediaryCall;

  constructor(call: RemoveCommonIntermediaryCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolLiquidityCall extends ethereum.Call {
  get inputs(): UpdatePoolLiquidityCall__Inputs {
    return new UpdatePoolLiquidityCall__Inputs(this);
  }

  get outputs(): UpdatePoolLiquidityCall__Outputs {
    return new UpdatePoolLiquidityCall__Outputs(this);
  }
}

export class UpdatePoolLiquidityCall__Inputs {
  _call: UpdatePoolLiquidityCall;

  constructor(call: UpdatePoolLiquidityCall) {
    this._call = call;
  }

  get key(): UpdatePoolLiquidityCallKeyStruct {
    return changetype<UpdatePoolLiquidityCallKeyStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get liquidityScore(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdatePoolLiquidityCall__Outputs {
  _call: UpdatePoolLiquidityCall;

  constructor(call: UpdatePoolLiquidityCall) {
    this._call = call;
  }
}

export class UpdatePoolLiquidityCallKeyStruct extends ethereum.Tuple {
  get baseCurrency(): Address {
    return this[0].toAddress();
  }

  get quoteCurrency(): Address {
    return this[1].toAddress();
  }
}
